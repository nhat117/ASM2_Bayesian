
  data {
    # Standardizing SalePrice
    ysd <- sd(SalePrice)
    for (i in 1:Ntotal) {
      zy[i] <- SalePrice[i] / ysd
    }

    # Standardizing predictors (Area, Bedrooms, etc.)
    for (j in 1:Nx) {
      xsd[j] <- sd(x[, j])
      for (i in 1:Ntotal) {
        zx[i, j] <- x[i, j] / xsd[j]
      }
    }
  }

  model {
    # Define all necessary parameters directly in the model

    # Area-specific parameters
    shape_area <- 2.5
    rate_area <- 1.5

    # Bedrooms-specific parameters
    n_bedrooms <- 5  # Fixed integer, you can adjust based on your data
    p_bedrooms <- 0.7  # Probability between 0 and 1

    # Bathrooms-specific parameters
    n_bathrooms <- 4
    p_bathrooms <- 0.5

    # CarPark-specific parameters
    lambda_carpark <- 1.2

    # PropertyType-specific parameters
    p_property <- 0.4

    # Likelihood for standardized data
    for (i in 1:Ntotal) {
      zy[i] ~ dnorm(mu[i], tau)
      mu[i] <- zbeta0 + sum(zbeta[1:Nx] * zx[i, 1:Nx])
    }

    # Priors for coefficients
    zbeta0 ~ dnorm(0, 1/10^2)  # Weak prior for intercept

    # Area: Follows a Gamma distribution
    for (i in 1:Ntotal) {
      Area[i] ~ dgamma(shape_area, rate_area)
    }
    zbeta[1] ~ dnorm(90 / xsd[1], 1 / 10^2)

    # Bedrooms: Treated as data, not modeled using `dbinom` here
    zbeta[2] ~ dnorm(100000 / xsd[2], 1 / 50000^2)

    # Bathrooms: Treated as data, not modeled using `dbinom`
    zbeta[3] ~ dnorm(0, 1 / 10^6)

    # CarParks: Follows a Poisson distribution
    for (i in 1:Ntotal) {
      CarParks[i] ~ dpois(lambda_carpark)
    }
    zbeta[4] ~ dnorm(120000 / xsd[4], 1 / 10000^2)

    # PropertyType: Follows a Bernoulli distribution
    for (i in 1:Ntotal) {
      PropertyType[i] ~ dbern(p_property)
    }
    zbeta[5] ~ dnorm(-150000 / xsd[5], 1 / 5000^2)

    # Residual variance (inverse gamma)
    zVar ~ dgamma(0.01, 0.01)
    tau <- 1 / zVar

    # Transforming back to original scale
    beta0 <- zbeta0 * ysd
    for (j in 1:Nx) {
      beta[j] <- (zbeta[j] * ysd) / xsd[j]
    }
  }

